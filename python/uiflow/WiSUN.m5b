{"category":"WiSUN","color":"#ff8000","blocks":["__WiSUN_start","__WiSUN_state","__WiSUN_values","__WiSUN_values_blocked","__WiSUN_wait"],"jscode":"// Block __WiSUN_start\nvar __WiSUN_start_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1 %2\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"route_b_id\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"route_b_id\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"route_b_password\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"route_b_password\"\n        }\n    ],\n    \"message2\": \"%1 %2\",\n    \"args2\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"rx\"\n        },\n        {\n            \"type\": \"field_number\",\n            \"value\": 0,\n            \"name\": \"rx\"\n        }\n    ],\n    \"message3\": \"%1 %2\",\n    \"args3\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"tx\"\n        },\n        {\n            \"type\": \"field_number\",\n            \"value\": 0,\n            \"name\": \"tx\"\n        }\n    ],\n    \"message4\": \"%1 %2\",\n    \"args4\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"reset\"\n        },\n        {\n            \"type\": \"field_number\",\n            \"value\": 0,\n            \"name\": \"reset\"\n        }\n    ],\n    \"message5\": \"%1 %2\",\n    \"args5\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"use_i2c\"\n        },\n        {\n            \"type\": \"field_input\",\n            \"text\": \"\",\n            \"spellcheck\": false,\n            \"name\": \"use_i2c\"\n        }\n    ],\n    \"message6\": \"%1 %2\",\n    \"args6\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"log_debug\"\n        },\n        {\n            \"type\": \"field_input\",\n            \"text\": \"\",\n            \"spellcheck\": false,\n            \"name\": \"log_debug\"\n        }\n    ],\n    \"colour\": \"#ff8000\"\n};\n\nwindow['Blockly'].Blocks['__WiSUN_start'] = {\n    init: function() {\n        this.jsonInit(__WiSUN_start_json);\n    }\n};\n\nwindow['Blockly'].Python['__WiSUN_start'] = function(block) {\n    var route_b_id = Blockly.Python.valueToCode(block, 'route_b_id', Blockly.Python.ORDER_NONE);\nvar route_b_password = Blockly.Python.valueToCode(block, 'route_b_password', Blockly.Python.ORDER_NONE);\nvar rx = block.getFieldValue('rx');\nvar tx = block.getFieldValue('tx');\nvar reset = block.getFieldValue('reset');\nvar use_i2c = block.getFieldValue('use_i2c');\nvar log_debug = block.getFieldValue('log_debug');\n    return `def wisun_start():\n    import sys\n    import machine\n    sys.path.append('/flash/res')\n    import wisun\n    wisun_uart = machine.UART(1, rx=${rx}, tx=${tx}, baudrate=115200)\n    if ${log_debug}:\n       import logging\n       logging.basicConfig(logging.DEBUG)\n    if ${use_i2c}:\n        import i2c_bus\n        i2c = i2c_bus.get(i2c_bus.M_BUS)\n        ioe = wisun.IOExpander(i2c=i2c, address=24, output=0x03, inversion=0x00, direction=0xfc)\n        # Initialize BP35A1 interfaces\n        wisun_wkup = ioe.pin(0)\n        wisun_reset = ioe.pin(1)\n    else:\n        wisun_wkup = None\n        wisun_reset = machine.Pin(${reset}, machine.Pin.OUT)\n    global wisun_instance\n    wisun_instance = wisun.WiSUN(wisun_uart, wisun_wkup, wisun_reset)\n    wisun_instance.start(${route_b_id}, ${route_b_password})\n\nwisun_start()` + \"\\n\";\n};\n\n// Block __WiSUN_state\nvar __WiSUN_state_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"Get Wi-SUN State\"\n        }\n    ],\n    \"colour\": \"#ff8000\"\n};\n\nwindow['Blockly'].Blocks['__WiSUN_state'] = {\n    init: function() {\n        this.jsonInit(__WiSUN_state_json);\n    }\n};\n\nwindow['Blockly'].Python['__WiSUN_state'] = function(block) {\n        return [`wisun_instance.state()`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n// Block __WiSUN_values\nvar __WiSUN_values_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"Get Wi-SUN Values\"\n        }\n    ],\n    \"colour\": \"#ff8000\"\n};\n\nwindow['Blockly'].Blocks['__WiSUN_values'] = {\n    init: function() {\n        this.jsonInit(__WiSUN_values_json);\n    }\n};\n\nwindow['Blockly'].Python['__WiSUN_values'] = function(block) {\n        return [`wisun_instance.values()`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n// Block __WiSUN_values_blocked\nvar __WiSUN_values_blocked_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"Get WiSUN Values (Blocked)\"\n        }\n    ],\n    \"colour\": \"#ff8000\"\n};\n\nwindow['Blockly'].Blocks['__WiSUN_values_blocked'] = {\n    init: function() {\n        this.jsonInit(__WiSUN_values_blocked_json);\n    }\n};\n\nwindow['Blockly'].Python['__WiSUN_values_blocked'] = function(block) {\n        return [`wisun_instance.wait_values()`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n// Block __WiSUN_wait\nvar __WiSUN_wait_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"Wait WiSUN Update\"\n        }\n    ],\n    \"colour\": \"#ff8000\"\n};\n\nwindow['Blockly'].Blocks['__WiSUN_wait'] = {\n    init: function() {\n        this.jsonInit(__WiSUN_wait_json);\n    }\n};\n\nwindow['Blockly'].Python['__WiSUN_wait'] = function(block) {\n        return `wisun_instance.wait_values()` + \"\\n\";\n};\n\n","code":{"start":["window['Blockly'].Python['__WiSUN_start'] = function(block) {\n    var route_b_id = Blockly.Python.valueToCode(block, 'route_b_id', Blockly.Python.ORDER_NONE);\nvar route_b_password = Blockly.Python.valueToCode(block, 'route_b_password', Blockly.Python.ORDER_NONE);\nvar rx = block.getFieldValue('rx');\nvar tx = block.getFieldValue('tx');\nvar reset = block.getFieldValue('reset');\nvar use_i2c = block.getFieldValue('use_i2c');\nvar log_debug = block.getFieldValue('log_debug');\n    return `def wisun_start():\n    import sys\n    import machine\n    sys.path.append('/flash/res')\n    import wisun\n    wisun_uart = machine.UART(1, rx=${rx}, tx=${tx}, baudrate=115200)\n    if ${log_debug}:\n       import logging\n       logging.basicConfig(logging.DEBUG)\n    if ${use_i2c}:\n        import i2c_bus\n        i2c = i2c_bus.get(i2c_bus.M_BUS)\n        ioe = wisun.IOExpander(i2c=i2c, address=24, output=0x03, inversion=0x00, direction=0xfc)\n        # Initialize BP35A1 interfaces\n        wisun_wkup = ioe.pin(0)\n        wisun_reset = ioe.pin(1)\n    else:\n        wisun_wkup = None\n        wisun_reset = machine.Pin(${reset}, machine.Pin.OUT)\n    global wisun_instance\n    wisun_instance = wisun.WiSUN(wisun_uart, wisun_wkup, wisun_reset)\n    wisun_instance.start(${route_b_id}, ${route_b_password})\n\nwisun_start()` + \"\\n\";\n};\n\n","def wisun_start():\n    import sys\n    import machine\n    sys.path.append('/flash/res')\n    import wisun\n    wisun_uart = machine.UART(1, rx=${rx}, tx=${tx}, baudrate=115200)\n    if ${log_debug}:\n       import logging\n       logging.basicConfig(logging.DEBUG)\n    if ${use_i2c}:\n        import i2c_bus\n        i2c = i2c_bus.get(i2c_bus.M_BUS)\n        ioe = wisun.IOExpander(i2c=i2c, address=24, output=0x03, inversion=0x00, direction=0xfc)\n        # Initialize BP35A1 interfaces\n        wisun_wkup = ioe.pin(0)\n        wisun_reset = ioe.pin(1)\n    else:\n        wisun_wkup = None\n        wisun_reset = machine.Pin(${reset}, machine.Pin.OUT)\n    global wisun_instance\n    wisun_instance = wisun.WiSUN(wisun_uart, wisun_wkup, wisun_reset)\n    wisun_instance.start(${route_b_id}, ${route_b_password})\n\nwisun_start()"],"state":["window['Blockly'].Python['__WiSUN_state'] = function(block) {\n        return [`wisun_instance.state()`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n","wisun_instance.state()"],"values":["window['Blockly'].Python['__WiSUN_values'] = function(block) {\n        return [`wisun_instance.values()`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n","wisun_instance.values()"],"values_blocked":["window['Blockly'].Python['__WiSUN_values_blocked'] = function(block) {\n        return [`wisun_instance.wait_values()`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n","wisun_instance.wait_values()"],"wait":["window['Blockly'].Python['__WiSUN_wait'] = function(block) {\n        return `wisun_instance.wait_values()` + \"\\n\";\n};\n\n","wisun_instance.wait_values()"]}}